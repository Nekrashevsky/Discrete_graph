import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
import scipy.sparse
import networkx.algorithms.approximation as approx

# Функція для візуалізації графа
def visualize_graph(G):
    nx.draw(G, with_labels=True)
    plt.show()

# Функція для забезпечення повноти графа
def make_complete(G, high_weight=1e6):
    complete_graph = nx.complete_graph(G.nodes)
    for u, v in complete_graph.edges:
        if not G.has_edge(u, v):
            G.add_edge(u, v, weight=high_weight)
    return G

# Вершини з лабораторних робіт
lab3_edges = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (1, 3), (3, 5)]
lab4_edges = [('A', 'B', 9), ('B', 'C', 7), ('C', 'D', 7), ('D', 'E', 5), 
              ('E', 'F', 8), ('F', 'G', 9), ('G', 'H', 9), ('H', 'A', 4), ('A', 'F', 6)]
lab5_edges = [('A', 'B', 6), ('B', 'C', 1), ('C', 'D', 3), ('D', 'E', 1), 
              ('E', 'F', 2), ('F', 'G', 2), ('G', 'H', 9), ('H', 'A', 4), ('A', 'G', 2)]

# Створення графів
G3 = nx.Graph(lab3_edges)
G4 = nx.Graph()
G4.add_weighted_edges_from(lab4_edges)
G5 = nx.Graph()
G5.add_weighted_edges_from(lab5_edges)

# Зробити графи повними
G3 = make_complete(G3)
G4 = make_complete(G4)
G5 = make_complete(G5)

# Візуалізувати графи
visualize_graph(G3)
visualize_graph(G4)
visualize_graph(G5)

# Функція для виконання графових алгоритмів
def analyze_graph(G):
    # Матриця суміжності
    adj_matrix = nx.adjacency_matrix(G).todense()
    print("Adjacency Matrix:\n", adj_matrix)

    # Матриця інцидентності
    inc_matrix = nx.incidence_matrix(G).todense()
    print("Incidence Matrix:\n", inc_matrix)

    # Хроматичне число
    chromatic_number = nx.coloring.greedy_color(G, strategy='largest_first')
    print("Chromatic Number:", max(chromatic_number.values()) + 1)

    # Крайнє хроматичне число
    edge_chromatic_number = nx.coloring.greedy_color(nx.line_graph(G), strategy='largest_first')
    print("Edge Chromatic Number:", max(edge_chromatic_number.values()) + 1)

    # Знайти ейлерові цикли
    def find_eulerian_cycles(G):
        return list(nx.eulerian_circuit(G))

    if nx.is_eulerian(G):
        eulerian_cycles = find_eulerian_cycles(G)
        print("Eulerian Cycles:", eulerian_cycles)
    else:
        print("The graph is not Eulerian")

    # Знайти гамільтоніан циклу за допомогою апроксимації (TSP)
    def find_hamiltonian_cycle(G):
        return approx.greedy_tsp(G, source=list(G.nodes())[0])

    hamiltonian_cycle = find_hamiltonian_cycle(G)
    print("Hamiltonian Cycle:", hamiltonian_cycle)

    # Глибинний пошук (DFS)
    def dfs(graph, start):
        visited, stack = set(), [start]
        while stack:
            vertex = stack.pop()
            if vertex not in visited:
                visited.add(vertex)
                stack.extend(set(graph.neighbors(vertex)) - visited)
        return visited

    print("DFS:", dfs(G, list(G.nodes())[0]))

    # Пошук в ширину (BFS)
    def bfs(graph, start):
        visited, queue = set(), [start]
        while queue:
            vertex = queue.pop(0)
            if vertex not in visited:
                visited.add(vertex)
                queue.extend(set(graph.neighbors(vertex)) - visited)
        return visited

    print("BFS:", bfs(G, list(G.nodes())[0]))

    # Алгоритм Дейкстри    def dijkstra(graph, start):
        return nx.single_source_dijkstra(graph, start)

    distances, paths = dijkstra(G, list(G.nodes())[0])
    print("Dijkstra's shortest distances:", distances)
    print("Paths:", paths)

    # Алгоритм Флойда-Уоршалла   
 dist_matrix = nx.floyd_warshall_numpy(G)
    print("Floyd-Warshall Distance Matrix:\n", dist_matrix)

    # Найдовша найкоротша відстань   
 longest_shortest_distance = dist_matrix.max()
    print("Longest Shortest Distance:", longest_shortest_distance)

    # Найкоротша відстань 
    shortest_shortest_distance = dist_matrix[dist_matrix != 0].min()
    print("Shortest Shortest Distance:", shortest_shortest_distance)

# Проаналізувати кожен граф
print("Analysis for Lab 3 Graph:")
analyze_graph(G3)
print("\nAnalysis for Lab 4 Graph:")
analyze_graph(G4)
print("\nAnalysis for Lab 5 Graph:")
analyze_graph(G5)
